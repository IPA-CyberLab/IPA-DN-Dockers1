★☆ 登用のメモ ☆★


# イメージ名
dockervault_ngnix_1_23_4-patch230404_x64

# バージョン
20230405_001

# イメージの目的
これは、Ubuntu 20.04 環境上の 「Nginx の登改造版ブランチ IPA-DN-Nginx-1.23.4-patch230404」 の安定動作イメージである。



# ビルド方法 (dn-docker1 にて)

## 初回のみ Git クローンする
cd ~/ && git clone --recursive https://github.com/IPA-CyberLab/IPA-DN-Dockers1.git

## ビルド実施
cd ~/IPA-DN-Dockers1/ && (cd $(git rev-parse --show-toplevel) && git pull origin master && git submodule update --init --recursive) && cd ~/IPA-DN-Dockers1/dockervault_ngnix_1_23_4-patch230404_x64/ && docker build -t tmpimg01 . && echo Docker Image Build OK.



# ビルドしたマシンにおける簡易動作テスト (必要な場合のみ) - bash 起動
mkdir -p /etc/docker_nginx/
curl https://lts.dn.ipantt.net/d/230406_001_47048/230406_nginx_1.23.4_default_config_files.tar.gz -o /etc/docker_nginx/_tmp.tar.gz
cd /etc/docker_nginx/
tar xzvf _tmp.tar.gz

mkdir -p /etc/docker_nginx/modules-enabled/
mkdir -p /etc/docker_nginx/sites-enabled/

curl --insecure --pinnedpubkey "sha256//lvnOVgA0u06WySztudkn+urQda/zFBRd65A5wCmcBpQ=" https://static.stable1.dn.ipantt.net/d/211115_002_dummy_certs2_23720/00_DummyCert2.cer -o /etc/docker_nginx/new_cert.crt

curl --insecure --pinnedpubkey "sha256//lvnOVgA0u06WySztudkn+urQda/zFBRd65A5wCmcBpQ=" https://static.stable1.dn.ipantt.net/d/211115_002_dummy_certs2_23720/00_DummyCert2.key -o /etc/docker_nginx/new_cert.key


cat <<\EOF > /etc/docker_nginx/nginx.conf
user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;
worker_rlimit_nofile 200000;

events {
    worker_connections 40000;
    multi_accept on;
    use epoll;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 15;
    types_hash_max_size 2048;
    server_tokens off;
    server_names_hash_bucket_size 128;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "AES128-SHA:ALL:!EXPORT:!LOW:!aNULL:!eNULL:!SSLv2";

    log_format main '[$time_local] Client=[$remote_addr]:$remote_port Server=[$server_addr]:$server_port Host=$host Proto=$server_protocol Request="$request" Status=$status Size=$body_bytes_sent Time=$request_time Referer="$http_referer" UserAgent="$http_user_agent" Username=$remote_user Ssl=$ssl_protocol Cipher=$ssl_cipher';
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    gzip off;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        
        server_name  _;
        ssl_certificate /etc/nginx/new_cert.crt;
        ssl_certificate_key /etc/nginx/new_cert.key;
        
        location / {
            root /etc/nginx/;
            index q7QA3uahYbZvjXVgR4c5pJJw.html;
            fancyindex on;
            fancyindex_name_length 200;
            fancyindex_exact_size off;
            fancyindex_localtime on;
            fancyindex_directories_first on;
        }
        location = /stat/ {
            stub_status;
        }
    }

}

EOF



docker run -it --rm --network host --mount type=bind,source=/etc/docker_nginx/,target=/etc/nginx/ tmpimg01 bash

中で

/usr/bin/supervisord

http://dn-docker1/
ID: test
PW: test

## 無事起動したら Ctrl + C で終了 -> exit で終了


# イメージ公開
docker login dockervault-auth.dn.ipantt.net

docker tag tmpimg01 dockervault-auth.dn.ipantt.net/dockervault_ngnix_1_23_4-patch230404_x64:20230405_001

docker push dockervault-auth.dn.ipantt.net/dockervault_ngnix_1_23_4-patch230404_x64:20230405_001





# 利用方法 (dn-docker2 でテスト可)

# Docker のインストール
sudo apt-get -y update && sudo apt-get -y install docker.io

# 設定ファイルの準備
mkdir -p /usr/local/etc/

cat <<\EOF > /usr/local/etc/dnsdist.conf
controlSocket("127.0.0.1:5199")
webserver("0.0.0.0:80")
setWebserverConfig({acl="0.0.0.0/0",password="test",apiKey="test"})

setLocal("0.0.0.0")
setACL({"0.0.0.0/0"})
--addAction(AllRule(), SetECSOverrideAction(true))
--addAction(AllRule(), SetDisableECSAction())
--setECSOverride(true)
--setECSSourcePrefixV4(0)
--setECSSourcePrefixV6(0)

newServer({address="8.8.8.8", maxCheckFailures=5, rise=10, checkInterval=1, disableZeroScope=false, useProxyProtocol=false } )


pc = newPacketCache(1000000, {maxTTL=5184000, minTTL=0, temporaryFailureTTL=5, staleTTL=59, dontAge=true, parseECS=false, skipOptions={8}})

setStaleCacheEntriesTTL(5184000)
setCacheCleaningPercentage(20)

getPool(""):setCache(pc)
EOF


# イメージ取得

sudo docker pull dockervault.dn.ipantt.net/dockervault_ngnix_1_23_4-patch230404_x64:20230405_001

# デーモンとして OS の起動時に常時起動するように登録し、実際に動作を開始
sudo docker run -d --restart always --name daemon_dnsdist --log-driver=journald --log-opt tag=docker_log/{{.Name}}/{{.ID}} --network host --mount type=bind,source=/usr/local/etc/,target=/usr/local/etc/ dockervault.dn.ipantt.net/dockervault_ngnix_1_23_4-patch230404_x64:20230405_001

# デーモンとして動作しているコンテナのログの確認 (必要に応じて)
sudo docker logs -f daemon_dnsdist

# デーモンとして動作しているコンテナへの bash への入り方 (デバッグ用)
sudo docker exec -it daemon_dnsdist bash

# デーモンとして動作しているコンテナへの bash への入り方 (デバッグ用 - dnsdist コンソールを開く)
sudo docker exec -it daemon_dnsdist /usr/local/bin/dnsdist -c 127.0.0.1:5199

# フォアグラウンドプロセスとしてデバッグ起動 (デバッグ用)
sudo docker run -it --rm --network host --mount type=bind,source=/usr/local/etc/,target=/usr/local/etc/ dockervault.dn.ipantt.net/dockervault_ngnix_1_23_4-patch230404_x64:20230405_001


# デーモンコンテナの停止
sudo docker stop daemon_dnsdist

# デーモンコンテナの再開
sudo docker start daemon_dnsdist

# 動作中のデーモンコンテナの削除
sudo docker stop daemon_dnsdist
sudo docker rm daemon_dnsdist



